// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.12.4
// source: tempo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type handleServerStreamingCall,
  makeGenericClientConstructor,
  Metadata,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "tempo";

/**
 * Client sents this message to start the transaction stream,
 * if the auth token is valid
 */
export interface StartStream {
  /** Authentication token */
  authToken: string;
}

/** Transaction which was read from shreds. */
export interface Transaction {
  /** First metadata field */
  slot: number;
  /** Second metadata field */
  index: number;
  /** Variable-length binary payload */
  payload: Uint8Array;
}

function createBaseStartStream(): StartStream {
  return { authToken: "" };
}

export const StartStream: MessageFns<StartStream> = {
  encode(message: StartStream, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authToken !== "") {
      writer.uint32(10).string(message.authToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartStream {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartStream();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartStream {
    return { authToken: isSet(object.authToken) ? globalThis.String(object.authToken) : "" };
  },

  toJSON(message: StartStream): unknown {
    const obj: any = {};
    if (message.authToken !== "") {
      obj.authToken = message.authToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartStream>, I>>(base?: I): StartStream {
    return StartStream.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartStream>, I>>(object: I): StartStream {
    const message = createBaseStartStream();
    message.authToken = object.authToken ?? "";
    return message;
  },
};

function createBaseTransaction(): Transaction {
  return { slot: 0, index: 0, payload: new Uint8Array(0) };
}

export const Transaction: MessageFns<Transaction> = {
  encode(message: Transaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.slot !== 0) {
      writer.uint32(8).uint64(message.slot);
    }
    if (message.index !== 0) {
      writer.uint32(16).uint64(message.index);
    }
    if (message.payload.length !== 0) {
      writer.uint32(26).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Transaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.slot = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.index = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transaction {
    return {
      slot: isSet(object.slot) ? globalThis.Number(object.slot) : 0,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
    };
  },

  toJSON(message: Transaction): unknown {
    const obj: any = {};
    if (message.slot !== 0) {
      obj.slot = Math.round(message.slot);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Transaction>, I>>(base?: I): Transaction {
    return Transaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Transaction>, I>>(object: I): Transaction {
    const message = createBaseTransaction();
    message.slot = object.slot ?? 0;
    message.index = object.index ?? 0;
    message.payload = object.payload ?? new Uint8Array(0);
    return message;
  },
};

/**
 * Service which streams transactions from decoded shreds.
 * May be unordered.
 */
export type TransactionStreamService = typeof TransactionStreamService;
export const TransactionStreamService = {
  openTransactionStream: {
    path: "/tempo.TransactionStream/OpenTransactionStream",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: StartStream) => Buffer.from(StartStream.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StartStream.decode(value),
    responseSerialize: (value: Transaction) => Buffer.from(Transaction.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Transaction.decode(value),
  },
} as const;

export interface TransactionStreamServer extends UntypedServiceImplementation {
  openTransactionStream: handleServerStreamingCall<StartStream, Transaction>;
}

export interface TransactionStreamClient extends Client {
  openTransactionStream(request: StartStream, options?: Partial<CallOptions>): ClientReadableStream<Transaction>;
  openTransactionStream(
    request: StartStream,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<Transaction>;
}

export const TransactionStreamClient = makeGenericClientConstructor(
  TransactionStreamService,
  "tempo.TransactionStream",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TransactionStreamClient;
  service: typeof TransactionStreamService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
