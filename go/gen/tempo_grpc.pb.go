// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: tempo.proto

package tempo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionStream_OpenTransactionStream_FullMethodName = "/tempo.TransactionStream/OpenTransactionStream"
)

// TransactionStreamClient is the client API for TransactionStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service which streams transactions from decoded shreds.
// May be unordered.
type TransactionStreamClient interface {
	OpenTransactionStream(ctx context.Context, in *StartStream, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Transaction], error)
}

type transactionStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionStreamClient(cc grpc.ClientConnInterface) TransactionStreamClient {
	return &transactionStreamClient{cc}
}

func (c *transactionStreamClient) OpenTransactionStream(ctx context.Context, in *StartStream, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Transaction], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionStream_ServiceDesc.Streams[0], TransactionStream_OpenTransactionStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StartStream, Transaction]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionStream_OpenTransactionStreamClient = grpc.ServerStreamingClient[Transaction]

// TransactionStreamServer is the server API for TransactionStream service.
// All implementations must embed UnimplementedTransactionStreamServer
// for forward compatibility.
//
// Service which streams transactions from decoded shreds.
// May be unordered.
type TransactionStreamServer interface {
	OpenTransactionStream(*StartStream, grpc.ServerStreamingServer[Transaction]) error
	mustEmbedUnimplementedTransactionStreamServer()
}

// UnimplementedTransactionStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionStreamServer struct{}

func (UnimplementedTransactionStreamServer) OpenTransactionStream(*StartStream, grpc.ServerStreamingServer[Transaction]) error {
	return status.Errorf(codes.Unimplemented, "method OpenTransactionStream not implemented")
}
func (UnimplementedTransactionStreamServer) mustEmbedUnimplementedTransactionStreamServer() {}
func (UnimplementedTransactionStreamServer) testEmbeddedByValue()                           {}

// UnsafeTransactionStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionStreamServer will
// result in compilation errors.
type UnsafeTransactionStreamServer interface {
	mustEmbedUnimplementedTransactionStreamServer()
}

func RegisterTransactionStreamServer(s grpc.ServiceRegistrar, srv TransactionStreamServer) {
	// If the following call pancis, it indicates UnimplementedTransactionStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionStream_ServiceDesc, srv)
}

func _TransactionStream_OpenTransactionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartStream)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionStreamServer).OpenTransactionStream(m, &grpc.GenericServerStream[StartStream, Transaction]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionStream_OpenTransactionStreamServer = grpc.ServerStreamingServer[Transaction]

// TransactionStream_ServiceDesc is the grpc.ServiceDesc for TransactionStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tempo.TransactionStream",
	HandlerType: (*TransactionStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenTransactionStream",
			Handler:       _TransactionStream_OpenTransactionStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tempo.proto",
}
